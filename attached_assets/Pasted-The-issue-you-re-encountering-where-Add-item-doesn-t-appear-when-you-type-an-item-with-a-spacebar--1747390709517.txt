The issue you're encountering where "Add item" doesn't appear when you type an item with a spacebar is likely due to how the Command component internally filters its CommandItem children.

Here's a breakdown of the problem and the solution:

The Problem

Command's Internal Filtering: The Command component (from shadcn/ui, which uses cmdk) filters its CommandItem children based on the CommandInput's current value (your searchTerm). An item is shown if its value prop or its text content (children) contains the searchTerm. This comparison is case-insensitive but typically includes spaces.

"Add new" CommandItem Properties:

Your "Add new" CommandItem has a hardcoded value="add-new".

Its text content is Add "{searchTerm.trim()}".

Scenario with a Space:

User types: "My New Item " (note the trailing space).

searchTerm state becomes "My New Item ".

searchTerm.trim() becomes "My New Item".

The text content of the "Add new" item becomes Add "My New Item".

Filtering Logic Failure:

The Command component tries to match searchTerm ("My New Item ") against:

The value prop: Does "add-new".toLowerCase() contain "my new item "? No.

The text content: Does "add \"my new item\"".toLowerCase() contain "my new item "? No, because the search query has a trailing space that the item's text doesn't at that specific position.

As a result, the Command component's internal filter hides the "Add new" CommandItem.

The Solution

To fix this, you need to ensure that the "Add new" CommandItem passes the Command component's internal filter when it's supposed to be visible. The most straightforward way is to make its value prop dynamic and related to the searchTerm.

Additionally, it's good practice to trim the search term when filtering your existing options to provide a more user-friendly search experience (e.g., searching for "apple " should find "apple pie").

Here are the recommended changes:

Modify filteredOptions to use a trimmed search term:
This makes the filtering of your main list of options more robust and user-friendly.

--- a/your-component.tsx
+++ b/your-component.tsx
@@ -32,17 +32,15 @@
   const [searchTerm, setSearchTerm] = React.useState("")
   const inputRef = React.useRef<HTMLInputElement>(null)

const filteredOptions = React.useMemo(() => {
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
// Return all options if there's no search term
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
if (!searchTerm || !searchTerm.trim()) {
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
const trimmedSearchTerm = React.useMemo(() => searchTerm.trim(), [searchTerm]);
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
const filteredOptions = React.useMemo(() => {
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
if (!trimmedSearchTerm) {
     return options || [];
   }
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
// Normalize search term
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
const normalizedSearch = searchTerm.toLowerCase();
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
// Filter options based on normalized search
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
const normalizedSearch = trimmedSearchTerm.toLowerCase();
   return (options || []).filter(option => 
     option.label.toLowerCase().includes(normalizedSearch)
   );
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
}, [options, searchTerm])
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
}, [options, trimmedSearchTerm])
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

Update the "Add new" CommandItem's value prop:
Change value="add-new" to value={searchTerm}. This ensures that the item's value directly corresponds to the search query, making it visible to Command's filter. The onSelect handler for this item is specific, so it will correctly use searchTerm.trim() when calling onAddNew.
Also, ensure the conditional rendering for "Add new" uses the trimmed search term.

--- a/your-component.tsx
+++ b/your-component.tsx
@@ -65,7 +63,7 @@
       />
       <CommandEmpty className="py-2 text-sm text-center text-neutral-500">
         {emptyText}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Diff
IGNORE_WHEN_COPYING_END
{showAddNew && searchTerm && searchTerm.trim() && (
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
{showAddNew && trimmedSearchTerm && (
         <div 
           className="flex items-center justify-center mt-1 p-1.5 rounded-lg hover:bg-neutral-50 cursor-pointer transition-colors"
           onClick={() => {
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

@@ -74,7 +72,7 @@
}}
>
<Plus className="mr-1.5 h-3.5 w-3.5 text-primary" />

<span className="text-primary">Add "{searchTerm.trim()}"</span>
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
<span className="text-primary">Add "{trimmedSearchTerm}"</span>
         </div>
       )}
     </CommandEmpty>
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

@@ -98,19 +96,19 @@
/>
</CommandItem>
))}

{showAddNew && searchTerm && searchTerm.trim() && (
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
{showAddNew && trimmedSearchTerm && (
         <CommandItem
           key="add-new"
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
value="add-new"
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
value={searchTerm} // Use the raw searchTerm for matching against CommandInput
           onSelect={() => {
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
if (onAddNew) onAddNew(searchTerm.trim());
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
if (onAddNew) onAddNew(trimmedSearchTerm); // Add the trimmed version
             setOpen(false);
           }}
           className={cn(
             "rounded-lg py-2 px-3 text-sm flex items-center justify-center",
             "transition-colors duration-150 ease-out",
             "outline-none hover:bg-neutral-50 text-primary"
           )}
         >
           <Plus className="mr-1.5 h-3.5 w-3.5" />
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
<span>Add "{searchTerm.trim()}"</span>
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
<span>Add "{trimmedSearchTerm}"</span>
         </CommandItem>
       )}
     </CommandGroup>
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

Explanation of Changes:

trimmedSearchTerm: A new memoized variable trimmedSearchTerm is created from searchTerm.trim(). This is used for:

Filtering options: Now, searching for "item " will effectively search for "item", which is usually desired.

Conditional rendering of "Add new": showAddNew && trimmedSearchTerm is a cleaner condition.

Display text and value for onAddNew: Add "{trimmedSearchTerm}" and onAddNew(trimmedSearchTerm).

filteredOptions: Now uses trimmedSearchTerm for filtering, making the search for existing options more intuitive (ignores leading/trailing spaces in the query for matching).

CommandItem for "Add new":

value={searchTerm}: This is the key change. The Command component's filter will now compare its input (searchTerm) with this CommandItem's value (which is also searchTerm). If searchTerm is "My Item ", this item's value will be "My Item ", so it will match and be visible.

onSelect: It correctly calls onAddNew(trimmedSearchTerm) to ensure you add the cleaned-up string.

Display text: It shows Add "{trimmedSearchTerm}" to the user.

"Add new" in CommandEmpty: Similarly updated to use trimmedSearchTerm for consistency.

With these changes, when you type an item name with a trailing space:

filteredOptions will be filtered based on the text without the trailing space (e.g., searching "My Item " looks for "My Item" in existing options).

The "Add new" CommandItem will have its value prop set to the full searchTerm (e.g., "My Item "). The Command's internal filter will find this item because the search query matches the item's value.

The displayed text for adding will be the trimmed version (e.g., Add "My Item").

If selected, onAddNew will receive the trimmed version.

This should resolve the issue and make the "Add item" functionality work consistently, even with trailing spaces in the input.